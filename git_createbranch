#!/bin/bash
# create

git_createbranch() {
    local branch_name
    local source_branch="develop"

    # Check if the current directory is a Git repository
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: Not a Git repository. Exiting."
        return 1
    fi

    if [ $# -eq 2 ]; then
        source_branch="$1"
        branch_name="$2"
    elif [ $# -eq 1 ]; then
        branch_name="$1"
    else
        echo "Usage: createbranch <source_branch> <branch_name> or createbranch <branch_name>"
        return 1
    fi

    # Check if the current directory is a Git repository
    if ! git rev-parse --is-inside-work-tree &>/dev/null; then
        echo "Error: Not in a valid Git repository. Please switch to a valid Git repository."
        return 1
    fi

    # Check if there are any changes
    if [[ -n "$(git status --porcelain)" ]]; then
        echo "Error: There are uncommitted changes. Please commit, stash, or revert the changes first."
        return 1
    fi

    # Check if the source branch exists on the remote
    if ! git ls-remote --exit-code --heads origin "$source_branch" &>/dev/null; then
        echo "Error: Source branch '$source_branch' does not exist on the remote 'origin'."
        return 1
    fi

    # Switch to the source branch
    git checkout "$source_branch" || return 1
    git pull origin "$source_branch" || return 1

    # Trim whitespace from the start and end, replace all remaining whitespaces with dashes, and collapse consecutive dashes
    branch_name=$(echo "$branch_name" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | tr -s '[:space:]' '-' | sed 's/-\+/-/g')

    # Remove trailing punctuation marks (., !, ?, etc.)
    branch_name=$(echo "$branch_name" | sed 's/[[:punct:]]*$//')

    if [[ $branch_name != feature/* && $branch_name != bugfix/* && $branch_name != hotfix/* ]]; then
        branch_name="feature/$branch_name"
    fi


    # Remove invalid characters: space, ~, ^, :, ?, *, [, and \
    branch_name=$(echo "$branch_name" | tr -d ' ~^:?*[]\\')

    # Create a new branch based on the source branch
    git checkout -b "$branch_name" || return 1

    echo "New branch '$branch_name' created based on '$source_branch'."
}
